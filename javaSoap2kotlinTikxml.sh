#!/usr/bin/perl
use v5.14;
use strict;
use File::Basename;
use File::Path;
use File::Spec;

#print @ARGV."\n";
#foreach(@ARGV) {
#	print "\t$_\n";
#}

if (!defined @ARGV[0]) {
	print "please provide folder with java models generated by wsimport tool";
	exit -1;
}
my $path = File::Spec->canonpath(@ARGV[0]);
my $root = dirname($path);
my $dir = basename($path);
my $ktdir = File::Spec->catdir($root, $dir."_kt");

mkdir $ktdir;

checkDir(File::Spec->catdir($root, $dir), $ktdir);
exit 0; #just an indicator that there is no global code after this point

sub checkDir
{
	my $from = $_[0];
	my $to = $_[1];
	
	opendir(H, $from);
	
	my @dirs = ();
	while (my $file = readdir(H)) {
		next if $file =~ /^\.\.?$/;
		my $fromfile = File::Spec->catfile($from, $file);
		if (-d $fromfile) {
			push(@dirs,$file);
		} else {
			if ($file =~ m/\.java$/) {
				my $tofile = File::Spec->catfile($to, ($file =~ /(.*\.)java$/)[0]."kt");
				convert($fromfile, $tofile);
			}
		}
	}
	closedir(H);
	foreach(@dirs) {
		my $fromsub = File::Spec->catdir($from, $_);
		my $tosub = File::Spec->catdir($to, $_);
		mkdir $tosub;
		checkDir($fromsub, $tosub);
	}
};

sub convert
{
	my $from = $_[0];
	my $to = $_[1];
	
	open(my $fh_in, '<', $from);
	my $javaclass = do { local $/; <$fh_in> };
	close($fh_in);
	my ($type, $classname) = $javaclass =~ /public ((?:class|enum)) (\w+)/;
	next if (!($javaclass =~ /\@XmlType/));
	if ($classname ne 'Charge') { return; }
	my $ktcode = '';
	given($type) {
		when('class') { $ktcode = convert_class($javaclass); }
		when('enum') { $ktcode = convert_enum($javaclass); }
		default { return; }
	}
	print "$ktcode\n\n";
	#open(my $fh_out, '>', $to);
	#print $fh_out $ktcode;
	#close($fh_out);
};

sub convert_class
{
	my ($package) = $_[0] =~ /package ([\w\.]+);/;
	my ($classname) = $_[0] =~ /public class (\w+)/;
	
	my ($classalias) = $_[0] =~ /\@(?:XmlType|XmlRootElement)\(name = \"(\w+)\"/;
	my ($parentclass) = $_[0] =~ /extends (\w+)/;
	my @imports = (
		"import com.tickaroo.tikxml.annotation.Xml"
	);
	my @props = ();
	foreach($_[0] =~ m/((?:\@XmlElement|protected)[^;]+);/g) {
		my ($alias, $required, $nillable, $type, $name) = $_ =~ /^(?:\@XmlElement\((?:name = \"(\w+)\"|)((?:, |)required = true)?((?:, |)nillable = true)?\).*protected|protected) ([\w<>]+) (\w+)$/s;
		my @ktype = define_type($type, defined $required && !defined $nillable);
		push(@imports, @ktype[1]);
		push(@imports, "import com.tickaroo.tikxml.annotation.".(@ktype[0]?"Property":"")."Element");
		
		my $annotation = @ktype[0] ? "\@PropertyElement" : "\@Element";
		my @annotationProps = ();
		if(defined $alias && $alias ne $name) { push @annotationProps, "name=\"$alias\""; }
		if(@ktype[3] ne "") { push @annotationProps, "converter = @ktype[3]"; }
		my $prop = $annotation.(@annotationProps?'('.join(", ", @annotationProps).')':"")." val $name: @ktype[2]";
		push(@props, $prop);
	}
	my $ktcode = 
	"package $package\n".
	"\n".
	join("\n", uniq(@imports))."\n".
	"\n".
	"\@Xml".($classname eq $classalias ? "" : "(name=\"$classalias\")")."\n".
	"class $classname(".join(",\n".(" " x (7+length($classname))), @props).")".(defined $parentclass ? " : $parentclass" : "");
	return $ktcode;
};

sub convert_enum
{
	my ($package) = $_[0] =~ /package ([\w\.]+);/;
	my ($classname) = $_[0] =~ /public enum (\w+)/;
	
	my ($classalias) = $_[0] =~ /\@(?:XmlType|XmlRootElement)\(name = \"(\w+)\"/;
	my @imports = (
		"import com.tickaroo.tikxml.annotation.Xml"
	);
	my @props = ();
	foreach ($_[0] =~ m/(\@XmlEnumValue[^,;]*)(?:,|;)/g) {
		print $_."\n";
	}
	my $ktcode = 
	"package $package\n".
	"\n".
	join("\n", uniq(@imports))."\n".
	"\n".
	"\@Xml".($classname eq $classalias ? "" : "(name=\"$classalias\")")."\n".
	"class $classname(".join(",\n".(" " x (7+length($classname))), @props).")";
	return $ktcode;
};

# convert Java-types to Kotlin-Types allowing also for custom import
sub define_type
{
	my $original = $_[0].($_[1] ? "" : "?");
	given($_[0]) {
		when('boolean') { return (1, "", "Boolean", ""); }
		when('Boolean') { return (1, "", "Boolean?", ""); }
		when('BigDecimal') { return (1, "import java.math.BigDecimal", $original, "   ???converter???   "); } 
		when('int') { return (1, "", "Int", ""); }
		when('Integer') { return (1, "", "Int?", ""); }
		when('long') { return (1, "", "Long", ""); }
		when('String') { return (1, "", $original, ""); }
		when('XMLGregorianCalendar') { return (1, "import java.util.Date", "Date".($_[1] ? "" : "?"), ""); }
		when(/List<\w+>/) { return (0, "import java.util.List", $original, ""); }
		default { return (0, "", $original, ""); }
	}
};

# create list of only unique values from given list argument
sub uniq { 
	my %seen = ( "" => 1);
	my @unique = ();
	foreach my $value (@_) {
	  if (! $seen{$value}) {
		push @unique, $value;
		$seen{$value} = 1;
	  }
	}
	return @unique;
};

sub printArray
{
	print @_." elements\n";
	foreach(@_) { print "  $_ \n"; }
};


